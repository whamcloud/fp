// @flow

//
// INTEL CONFIDENTIAL
//
// Copyright 2013-2017 Intel Corporation All Rights Reserved.
//
// The source code contained or described herein and all documents related
// to the source code ("Material") are owned by Intel Corporation or its
// suppliers or licensors. Title to the Material remains with Intel Corporation
// or its suppliers and licensors. The Material contains trade secrets and
// proprietary and confidential information of Intel or its suppliers and
// licensors. The Material is protected by worldwide copyright and trade secret
// laws and treaty provisions. No part of the Material may be used, copied,
// reproduced, modified, published, uploaded, posted, transmitted, distributed,
// or disclosed in any way without Intel's prior express written permission.
//
// No license under any patent, copyright, trade secret or other intellectual
// property right is granted to or conferred upon you by disclosure or delivery
// of the Materials, either expressly, by implication, inducement, estoppel or
// otherwise. Any license under such intellectual property rights must be
// express and approved by Intel in writing.

import type { Maybe } from '@mfl/maybe';

type typeToAny<T> = (x: T) => any;
type manyToAny = (...rest: Array<any>) => any;
type anyToAny = (x: any) => any;
type container = Array<?any> | Object | Function;

export type Fn1<A, B> = (a: A, ...rest: empty[]) => B;
export type Fn2<A, B, C> = (
  a: A,
  b: B,
  ...rest: empty[]
) => C;
export type Fn3<A, B, C, D> = (
  a: A,
  b: B,
  c: C,
  ...rest: empty[]
) => D;
export type Fn4<A, B, C, D, E> = (
  a: A,
  b: B,
  c: C,
  d: D,
  ...rest: empty[]
) => E;
export type Fn5<A, B, C, D, E, F> = (
  a: A,
  b: B,
  c: C,
  d: D,
  e: E,
  ...rest: empty[]
) => F;
export type Fn6<A, B, C, D, E, F, G> = (
  a: A,
  b: B,
  c: C,
  d: D,
  e: E,
  f: F,
  ...rest: empty[]
) => G;
export type Fn7<A, B, C, D, E, F, G, H> = (
  a: A,
  b: B,
  c: C,
  d: D,
  e: E,
  f: F,
  g: G,
  ...rest: empty[]
) => H;
export type Fn8<A, B, C, D, E, F, G, H, I> = (
  a: A,
  b: B,
  c: C,
  d: D,
  e: E,
  f: F,
  g: G,
  h: H,
  ...rest: empty[]
) => I;
export type Fn9<A, B, C, D, E, F, G, H, I, L> = (
  a: A,
  b: B,
  c: C,
  d: D,
  e: E,
  f: F,
  g: G,
  h: H,
  i: I,
  ...rest: empty[]
) => L;

declare export function map<A, B>(
  fn: Fn1<A, B>,
  ...rest: empty[]
): Fn1<A[], B[]>;

declare export function tap<A>(
  fn: Fn1<A, any>,
  ...rest: empty[]
): Fn1<A[], A[]>;

declare export function filter<A>(
  fn: Fn1<A, boolean>,
  ...rest: empty[]
): Fn1<A[], A[]>;

declare export function some<A>(
  fn: Fn1<A, boolean>,
  ...rest: empty[]
): Fn1<A[], boolean>;

declare export function anyPass<A>(
  fns: Fn1<A, boolean>[],
  ...rest: empty[]
): Fn1<A[], boolean>;

declare export function every<A>(
  fn: Fn1<A, boolean>,
  ...rest: empty[]
): Fn1<A[], boolean>;

declare export function reduce<A, B>(
  accum: A,
  ...rest: empty[]
): Fn1<Fn2<A, B, A>, Fn1<Array<B>, A>>;

declare export function differenceBy<A>(
  fn: Fn1<A, mixed>,
  ...rest: empty[]
): Fn1<A[], Fn1<A[], A[]>>;

declare export function intersectionBy<A>(
  fn: Fn1<A, mixed>,
  ...rest: empty[]
): Fn1<A[], Fn1<A[], A[]>>;

declare export function difference<A>(
  xs: A[],
  ...rest: empty[]
): Fn1<A[], A[]>;

declare export function find<A>(
  fn: Fn1<A, boolean>,
  ...rest: empty[]
): Fn1<Array<A>, Maybe<A>>;

declare export function pluck<A, B>(
  key: string | number,
  ...rest: empty[]
): Fn1<A[], B[]>;

declare export function always<A>(x: A, ...rest: empty[]): (
  ...rest: any[]
) => A;

declare export function True<A>(
  x: A,
  ...rest: empty[]
): true;

declare export function False<A>(
  x: A,
  ...rest: empty[]
): false;

declare export function not<A>(
  x: A,
  ...rest: empty[]
): boolean;

declare export function identity<A>(
  x: A,
  ...rest: empty[]
): A;

declare export function head<A>(
  xs: A[],
  ...rest: empty[]
): Maybe<A>;
declare export function head<A: string>(
  xs: A,
  ...rest: empty[]
): Maybe<A>;

declare export function tail<A>(
  xs: A[],
  ...rest: empty[]
): A[];
declare export function tail<A: string>(
  xs: A,
  ...rest: empty[]
): A;

declare export function last<A>(
  xs: A[],
  ...rest: empty[]
): Maybe<A>;
declare export function last<A: string>(
  xs: A,
  ...rest: empty[]
): Maybe<A>;

declare export function unwrap(
  xs: mixed[],
  ...rest: empty[]
): Array<mixed>;

declare export function arrayWrap<A>(
  x: A,
  ...rest: empty[]
): A[];

declare export function once(
  fn: Function,
  ...rest: empty[]
): (...rest:any[]) => void;

declare export function lens(
  Function
): Fn1<Function, Function>;

declare export function view<A, B>(Function): Fn1<A, B>;

declare export function over<A>(Function): (anyToAny) => (
  A
) => A;

declare export function set<A>(Function): (any) => (A) => A;

declare export function mapped<A, B>(
  fn: Fn1<A, B>,
  ...rest: empty[]
): Fn1<A[], B[]>;

declare export function lensProp(
  name: string | number,
  ...rest: empty[]
): Function;

declare export function flow<A, B>(
  ab: Fn1<A, B>,
  ...rest: empty[]
): Fn1<A, B>;
declare export function flow<A, B, C>(
  ab: Fn1<A, B>,
  bc: Fn1<B, C>,
  ...rest: empty[]
): Fn1<A, C>;
declare export function flow<A, B, C, D>(
  ab: Fn1<A, B>,
  bc: Fn1<B, C>,
  cd: Fn1<C, D>,
  ...rest: empty[]
): Fn1<A, D>;
declare export function flow<A, B, C, D, E>(
  ab: Fn1<A, B>,
  bc: Fn1<B, C>,
  cd: Fn1<C, D>,
  de: Fn1<D, E>,
  ...rest: empty[]
): Fn1<A, E>;
declare export function flow<A, B, C, D, E, F>(
  ab: Fn1<A, B>,
  bc: Fn1<B, C>,
  cd: Fn1<C, D>,
  de: Fn1<D, E>,
  ef: Fn1<E, F>,
  ...rest: empty[]
): Fn1<A, F>;
declare export function flow<A, B, C, D, E, F, G>(
  ab: Fn1<A, B>,
  bc: Fn1<B, C>,
  cd: Fn1<C, D>,
  de: Fn1<D, E>,
  ef: Fn1<E, F>,
  fg: Fn1<F, G>,
  ...rest: empty[]
): Fn1<A, G>;
declare export function flow<A, B, C, D, E, F, G, H>(
  ab: Fn1<A, B>,
  bc: Fn1<B, C>,
  cd: Fn1<C, D>,
  de: Fn1<D, E>,
  ef: Fn1<E, F>,
  fg: Fn1<F, G>,
  gh: Fn1<G, H>,
  ...rest: empty[]
): Fn1<A, H>;
declare export function flow<A, B, C, D, E, F, G, H, I>(
  ab: Fn1<A, B>,
  bc: Fn1<B, C>,
  cd: Fn1<C, D>,
  de: Fn1<D, E>,
  ef: Fn1<E, F>,
  fg: Fn1<F, G>,
  gh: Fn1<G, H>,
  hi: Fn1<H, I>,
  ...rest: empty[]
): Fn1<A, I>;

declare export function compose<A, B>(
  ab: Fn1<A, B>,
  ...rest: empty[]
): Fn1<A, B>;
declare export function compose<A, B, C>(
  bc: Fn1<B, C>,
  ab: Fn1<A, B>,
  ...rest: empty[]
): Fn1<A, C>;
declare export function compose<A, B, C, D>(
  cd: Fn1<C, D>,
  bc: Fn1<B, C>,
  ab: Fn1<A, B>,
  ...rest: empty[]
): Fn1<A, D>;
declare export function compose<A, B, C, D, E>(
  de: Fn1<D, E>,
  cd: Fn1<C, D>,
  bc: Fn1<B, C>,
  ab: Fn1<A, B>,
  ...rest: empty[]
): Fn1<A, E>;
declare export function compose<A, B, C, D, E, F>(
  ef: Fn1<E, F>,
  de: Fn1<D, E>,
  cd: Fn1<C, D>,
  bc: Fn1<B, C>,
  ab: Fn1<A, B>,
  ...rest: empty[]
): Fn1<A, F>;
declare export function compose<A, B, C, D, E, F, G>(
  fg: Fn1<F, G>,
  ef: Fn1<E, F>,
  de: Fn1<D, E>,
  cd: Fn1<C, D>,
  bc: Fn1<B, C>,
  ab: Fn1<A, B>,
  ...rest: empty[]
): Fn1<A, G>;
declare export function compose<A, B, C, D, E, F, G, H>(
  gh: Fn1<G, H>,
  fg: Fn1<F, G>,
  ef: Fn1<E, F>,
  de: Fn1<D, E>,
  cd: Fn1<C, D>,
  bc: Fn1<B, C>,
  ab: Fn1<A, B>,
  ...rest: empty[]
): Fn1<A, H>;

declare export function eq<A, B>(
  a: A,
  ...rest: empty[]
): Fn1<B, boolean>;

declare export function noop(): void;

declare export function invoke<S, R>(
  fn: (...rest: S) => R,
  ...rest: empty[]
): Fn1<S, R>;

type anyToBoolArrT = Fn1<any, boolean>[];
declare export function and<A>(
  predicates: anyToBoolArrT,
  ...rest: empty[]
): Fn1<A, boolean>;

declare export function or<A>(
  predicates: anyToBoolArrT,
  ...rest: empty[]
): Fn1<A, boolean>;

declare export function bindMethod<R>(
  meth: string,
  ...rest: empty[]
): Fn1<container | string, (...args: any[]) => R>;

declare export function invokeMethod<A, R>(
  meth: string,
  ...rest: empty[]
): Fn1<any[], Fn1<A, R>>;

declare export function cond<A, B>(
  ...conditions: Array<[Fn1<A, boolean>, Fn1<A, B>]>
): Fn1<A, B>;

declare export function memoize<A>(
  fn: (...args: any[]) => A,
  ...rest: empty[]
): () => A;

declare export function eqFn<A, B>(
  fnA: typeToAny<A>,
  ...rest: empty[]
): Fn1<typeToAny<B>, Fn1<A, Fn1<B, boolean>>>;

declare export function zipObject<A, B>(
  keys: Array<A>,
  ...rest: empty[]
): Fn1<B[], Object>;

declare export function either<A, B>(
  fn: Fn1<A, B>,
  ...rest: empty[]
): Fn1<A, B | Error>;

declare export function mapFn(
  fns: Array<Function>,
  ...rest: empty[]
): Fn1<any[], any[]>;

declare export function chainL<A, B, C>(
  fn: Fn2<A, B, C>,
  ...rest: empty[]
): Fn1<B[], C>;

declare export function xProd<A, B>(
  a: A[],
  ...rest: empty[]
): Fn1<B[], Array<Array<any>>>;

declare export function uniqBy<A>(
  fn: Fn1<A, any>,
  ...rest: empty[]
): Fn1<A[], A[]>;

declare export function zipBy<A, B, C>(
  fn: (a: A, b: B) => C,
  ...rest: empty[]
): Fn1<A[], Fn1<B[], C[]>>;

declare export function times<A>(
  fn: Fn1<number, A>,
  ...rest: empty[]
): Fn1<number, A[]>;

type MatchInput<T> = Class<T> | (() => T) | T;
declare export function match<A, B, R1, R2, F1: Fn1<A, R1>, F2: Fn1<B, R2>>(
  xs: [[MatchInput<A>, F1], [MatchInput<B>, F2]],
  ...rest: empty[]
): F1 & F2;

declare export function match<A, B, C, R1, R2, R3, F1: Fn1<A, R1>, F2: Fn1<B, R2>, F3: Fn1<C, R3>>(
  xs: [[MatchInput<A>, F1], [MatchInput<B>, F2], [MatchInput<C>, F3]],
  ...rest: empty[]
): F1 & F2 & F3;

declare export function match<A, B, C, D, R1, R2, R3, R4, F1: Fn1<A, R1>, F2: Fn1<B, R2>, F3: Fn1<C, R3>, F4: Fn1<D, R4>>(
  xs: [[MatchInput<A>, F1], [MatchInput<B>, F2], [MatchInput<C>, F3], [MatchInput<D>, F4]],
  ...rest: empty[]
): F1 & F2 & F3 & F4;

declare export function match<A, B, C, D, E, R1, R2, R3, R4, R5, F1: Fn1<A, R1>, F2: Fn1<B, R2>, F3: Fn1<C, R3>, F4: Fn1<D, R4>, F5: Fn1<E, R5>>(
  xs: [[MatchInput<A>, F1], [MatchInput<B>, F2], [MatchInput<C>, F3], [MatchInput<D>, F4], [MatchInput<E>, F5]],
  ...rest: empty[]
): F1 & F2 & F3 & F4 & F5;
